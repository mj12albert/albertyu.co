name: ECR + Linode Deployment

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: albertyu.co
  ECR_PUBLIC_REGISTRY: public.ecr.aws/a2k4l4h2
  CONTAINER_NAME: app

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-22.04
    environment: testing

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get short commit hash
        id: get-short-sha
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_PUBLIC_REGISTRY }}

      - name: Build, tag, push image to ECR
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ env.ECR_PUBLIC_REGISTRY }}
          IMAGE_TAG: ${{ steps.get-short-sha.outputs.short_sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg IMAGE_TAG_V=$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output    name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Manually scp some files to Linode
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_DEPLOY_HOST }}
          username: ${{ secrets.SSH_DEPLOY_USER }}
          key: ${{ secrets.SSH_DEPLOY_KEY }}
          passphrase: ${{ secrets.SSH_DEPLOY_KEY_PASSPHRASE }}
          source: "./.dockerignore, ./docker-compose.yml, ./Dockerfile, ./nginx/*, ./cloudflare/*, ./package.json, ./package-lock.json"
          target: "/home/${{ secrets.SSH_DEPLOY_USER }}"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        env:
          ECR_REGISTRY: ${{ env.ECR_PUBLIC_REGISTRY }}
          IMAGE_TAG: ${{ steps.get-short-sha.outputs.short_sha }}
          CLOUDFLARE_DNS_API_TOKEN: ${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
        with:
          host: ${{ secrets.SSH_DEPLOY_HOST }}
          username: ${{ secrets.SSH_DEPLOY_USER }}
          key: ${{ secrets.SSH_DEPLOY_KEY }}
          passphrase: ${{ secrets.SSH_DEPLOY_KEY_PASSPHRASE }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,CONTAINER_NAME,CLOUDFLARE_DNS_API_TOKEN
          script: |
            echo "Starting deploy..."
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo > .env
            cat <<EOF > .env
            ECR_REGISTRY=$ECR_REGISTRY
            ECR_REPOSITORY=$ECR_REPOSITORY
            IMAGE_TAG=$IMAGE_TAG
            EOF
            curl https://ssl-config.mozilla.org/ffdhe2048.txt > ./nginx/dhparam
            echo "dns_cloudflare_api_token = $CLOUDFLARE_DNS_API_TOKEN" >> ./cloudflare/credentials
            chmod go-r ./cloudflare/credentials
            mkdir -p ./nginx/localhost
            openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./nginx/localhost/localhost.key -out ./nginx/localhost/localhost.crt -subj "/CN=localhost"
            docker container prune -f
            docker-compose --env-file ./.env up -d
            docker-compose ps -a
            echo "Bye ~"
